patch-package
--- a/node_modules/twitch-js/lib/client.js
+++ b/node_modules/twitch-js/lib/client.js
@@ -209,6 +209,8 @@ client.prototype.handleMessage = function handleMessage(message) {

         // https://github.com/justintv/Twitch-API/blob/master/chat/capabilities.md#notice
         case 'NOTICE':
+          this.emit('notices', channel, msgid, msg);
+
           switch (msgid) {
             // This room is now in subscribers-only mode.
             case 'subs_on':
@@ -572,6 +574,8 @@ client.prototype.handleMessage = function handleMessage(message) {
         // Handle subanniversary / resub..
         case 'USERNOTICE':
           {
+            this.emit('usernotices', channel, msgid, msg, message.tags);
+
             if (msgid === 'resub') {
               var username = message.tags['display-name'] || message.tags.login;
               var plan = message.tags['msg-param-sub-plan'];
@@ -582,7 +586,11 @@ client.prototype.handleMessage = function handleMessage(message) {
                 '\\r': '\r',
                 '\\n': '\n'
               });
-              var months = _.get(~~message.tags['msg-param-months'], null);
+
+              var shouldShareStreak = message.tags['msg-param-should-share-streak'] == 1;
+              var months = _.get(~~message.tags['msg-param-cumulative-months'], null);
+              var monthsStreak = shouldShareStreak ? _.get(~~message.tags['msg-param-streak-months'], null) : null;
+
               var prime = plan.includes('Prime');
               var userstate = message.tags;

@@ -590,7 +598,7 @@ client.prototype.handleMessage = function handleMessage(message) {
                 userstate['message-type'] = 'resub';
               }

-              this.emits(['resub', 'subanniversary'], [[channel, username, months, msg, userstate, { prime: prime, plan: plan, planName: planName }], [channel, username, months, msg, userstate, { prime: prime, plan: plan, planName: planName }]]);
+              this.emits(['resub', 'subanniversary'], [[channel, username, months, msg, userstate, { prime: prime, plan: plan, planName: planName }, monthsStreak], [channel, username, months, msg, userstate, { prime: prime, plan: plan, planName: planName }, monthsStreak]]);
             } else if (msgid === 'sub') {
               // Handle sub
               var _username = message.tags['display-name'] || message.tags.login;
@@ -652,6 +660,14 @@ client.prototype.handleMessage = function handleMessage(message) {
             break;
           }

+        // Single message removal on a channel.
+        case 'CLEARMSG':
+          var id = message.tags['target-msg-id'];
+          var login = message.tags.login;
+
+          this.emit('messagedeleted', channel, id, login, msg);
+          break;
+
         // Channel is now hosting another channel or exited host mode..
         case 'HOSTTARGET':
           // Stopped hosting..
@@ -935,7 +951,7 @@ client.prototype.handleMessage = function handleMessage(message) {
               message.tags['message-type'] = 'chat';
               this.log.info('[' + channel + '] <' + message.tags.username + '>: ' + msg);

-              this.emits(['chat', 'message'], [[channel, message.tags, msg, false], [channel, message.tags, msg, false]]);
+              this.emits(['chat', 'message'], [[channel, message.tags, msg, false, msgid], [channel, message.tags, msg, false, msgid]]);
             }
           }
           break;
@@ -1140,7 +1156,7 @@ client.prototype._sendCommand = function _sendCommand(delay, channel, command, f
 };

 // Send a message to channel..
-client.prototype._sendMessage = function _sendMessage(delay, channel, message, fn) {
+client.prototype._sendMessage = function _sendMessage(delay, channel, message, fn, commandPrefix) {
   var _this7 = this;

   // Promise a result..
@@ -1161,7 +1177,11 @@ client.prototype._sendMessage = function _sendMessage(delay, channel, message, f
         }, 350);
       }

-      _this7.ws.send('PRIVMSG ' + _.channel(channel) + ' :' + message);
+      if (commandPrefix) {
+	       _this7.ws.send(commandPrefix + ' PRIVMSG ' + _.channel(channel) + ' :' + message);
+      } else {
+        _this7.ws.send('PRIVMSG ' + _.channel(channel) + ' :' + message);
+      }

       var emotes = {};

@@ -1202,21 +1222,29 @@ client.prototype._updateEmoteset = function _updateEmoteset(sets) {

   this.emotes = sets;

-  this.api({
-    url: '/chat/emoticon_images?emotesets=' + sets,
-    headers: {
-      Authorization: 'OAuth ' + _.password(_.get(this.opts.identity.password, '')).replace('oauth:', ''),
-      'Client-ID': this.clientId
-    }
-  }, function (err, res, body) {
-    if (!err) {
-      _this8.emotesets = body.emoticon_sets || {};
-      return _this8.emit('emotesets', sets, _this8.emotesets);
-    }
-    setTimeout(function () {
-      _this8._updateEmoteset(sets);
-    }, 60000);
-  });
+  return _this8.emit('emotesets', sets, {});
+
+  // this.api({
+  //   url: '/chat/emoticon_images?emotesets=' + sets,
+  //   headers: {
+  //     Authorization: 'OAuth ' + _.password(_.get(this.opts.identity.password, '')).replace('oauth:', ''),
+  //     'Client-ID': this.clientId
+  //   }
+  // }, function (err, res, body) {
+  //   try {
+  //     if (!err) {
+  //       _this8.emotesets = body.emoticon_sets || {};
+  //       return _this8.emit('emotesets', sets, _this8.emotesets);
+  //     } else {
+  //       return _this8.emit('emotesets', sets, {});
+  //     }
+  //   } catch (error) {
+  //     return _this8.emit('emotesets', sets, {});
+  //   }
+  //   setTimeout(function () {
+  //     _this8._updateEmoteset(sets);
+  //   }, 60000);
+  // });
 };

 // Get current username..
patch-package
--- a/node_modules/twitch-js/lib/commands.js
+++ b/node_modules/twitch-js/lib/commands.js
@@ -422,7 +422,7 @@ module.exports = {
   },

   // Send a message on a channel..
-  say: function say(channel, message) {
+  say: function say(channel, message, commandPrefix) {
     channel = _.channel(channel);

     if (message.startsWith('.') && !message.startsWith('..') || message.startsWith('/') || message.startsWith('\\')) {
@@ -446,7 +446,7 @@ module.exports = {
       // if a message has been sent has been eaten
       // by the server, so we can only resolve the Promise.
       resolve([channel, message]);
-    });
+    }, commandPrefix);
   },

   // Enable slow mode on a channel..
patch-package
--- a/node_modules/twitch-js/lib/utils/fetch-helper.js
+++ b/node_modules/twitch-js/lib/utils/fetch-helper.js
@@ -28,7 +28,7 @@ var parseResponse = exports.parseResponse = function parseResponse(response) {
     }

     return json;
-  });
+  }).catch((e) => {});
 };

 exports.default = function () {
